{\rtf1\ansi\ansicpg1252\cocoartf2578
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 class Solution \{\
    public int climbStairs(int n) \{\
        //Recursion: Way(n) = Way(n-1) + Way(n-2); Way(1) = 1, Way(2) = 2;\
        return distinctWays(n);\
    \}\
    public int distinctWays(int n) \{\
        if(n == 1) return 1;\
        if(n == 2) return 2;\
        return distinctWays(n - 1) + distinctWays(n - 2);\
    \}\
\}\
\
class Solution \{\
    public int climbStairs(int n) \{\
        //Dynamic programming: Way(n) = Way(n-1) + Way(n-2)\
        int[] stair = new int[46];\
        stair[0] = 0;\
        stair[1] = 1;\
        stair[2] = 2;\
        return distinctWays(n, stair);\
    \}\
    public int distinctWays(int n, int[] stair) \{\
        if(stair[n] == 0) \{\
            stair[n] = distinctWays(n - 1, stair) + distinctWays(n - 2, stair);\
            return distinctWays(n - 1, stair) + distinctWays(n - 2, stair);\
        \}\
        return stair[n];\
    \}\
\}}